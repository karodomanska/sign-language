{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8541546,"sourceType":"datasetVersion","datasetId":5102890}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/karodomanska/slp-lstm?scriptVersionId=190630991\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"Wszystkie niezbędne importy i stałe:","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport tensorflow as tf\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Masking, Bidirectional, LSTM, Dropout, Dense, Input\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop\n\nfrom sklearn.metrics import confusion_matrix, f1_score, classification_report\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nprocessed_dir_path = '/kaggle/input/slp-processed-datanumpy/slp-processed-data'","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:36:12.809125Z","iopub.execute_input":"2024-06-15T15:36:12.809753Z","iopub.status.idle":"2024-06-15T15:36:25.212517Z","shell.execute_reply.started":"2024-06-15T15:36:12.809718Z","shell.execute_reply":"2024-06-15T15:36:25.21166Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-06-15 15:36:14.606221: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-15 15:36:14.606331: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-15 15:36:14.741516: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Wariant z wektorem między punktem charakterystycznym nadgarstka a pozostałymi punktami charakterystycznymi**","metadata":{}},{"cell_type":"code","source":"data = []\nlabels = []\n\ndef calculate_landmark_vectors(landmarks):\n    if len(landmarks) == 0:\n        return np.zeros((21, 3))\n    base_landmark = landmarks[0]\n    vectors = np.array([(lm[0] - base_landmark[0], lm[1] - base_landmark[1], lm[2] - base_landmark[2]) for lm in landmarks])\n    return vectors\n\nfor label in os.listdir(processed_dir_path):\n    label_path = os.path.join(processed_dir_path, label)\n    if not os.path.isdir(label_path):\n        continue\n\n    for file_name in os.listdir(label_path):\n        file_path = os.path.join(label_path, file_name)\n        if not os.path.isfile(file_path) or not file_path.endswith('.npz'):\n            continue\n        try:\n            data_dict = np.load(file_path, allow_pickle=True)\n            landmarks = data_dict['landmarks']\n\n            sequence_vectors = []\n            for frame_landmarks in landmarks:\n                if len(frame_landmarks) > 0:\n                    sequence_vectors.append(calculate_landmark_vectors(frame_landmarks[0]))\n                else:\n                    sequence_vectors.append(np.zeros((21, 3)))\n\n            data.append(sequence_vectors)\n            labels.append(label)\n        except Exception as e:\n            print(f\"Error processing {file_path}: {e}\")\n\nif len(data) == 0 or len(labels) == 0:\n    raise ValueError(\"No data found\")\n\nlabel_encoder = LabelEncoder()\nencoded_labels = label_encoder.fit_transform(labels)\n\nmax_sequence_length = max(len(seq) for seq in data)\npadded_data = pad_sequences(data, maxlen=max_sequence_length, dtype='float32', padding='post', truncating='post', value=np.zeros((21, 3)))\n\nX = np.array(padded_data)\ny = np.array(encoded_labels)\n\nX = X.reshape((X.shape[0], X.shape[1], 21 * 3))\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:36:44.149533Z","iopub.execute_input":"2024-06-15T15:36:44.149838Z","iopub.status.idle":"2024-06-15T15:36:51.177879Z","shell.execute_reply.started":"2024-06-15T15:36:44.149814Z","shell.execute_reply":"2024-06-15T15:36:51.176804Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"Budowa modelu","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers\n\n# Budowa modelu\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Masking(mask_value=0.0, input_shape=(max_sequence_length, 21 * 3)),\n    \n    # Dodane warstwy konwolucyjne\n    tf.keras.layers.Conv1D(filters=64, kernel_size=3, activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling1D(pool_size=2),\n    tf.keras.layers.Conv1D(filters=128, kernel_size=3, activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling1D(pool_size=2),\n    \n    # Warstwy LSTM\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, return_sequences=True, recurrent_initializer='glorot_uniform', recurrent_activation='sigmoid', use_cudnn=False)),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, recurrent_initializer='glorot_uniform', recurrent_activation='sigmoid', use_cudnn=False)),\n    tf.keras.layers.Dropout(0.2),\n    \n    # Warstwy Dense\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(len(label_encoder.classes_), activation='softmax')\n])\n\n# Kompilacja modelu\nmodel.compile(optimizer='RMSprop', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# Trenowanie modelu\nhistory = model.fit(X_train, y_train, epochs=0, batch_size=32, validation_split=0.2)\n\n# Ewaluacja modelu\nloss, accuracy = model.evaluate(X_test, y_test)\nprint(f'Test Loss: {loss}')\nprint(f'Test Accuracy: {accuracy}')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:48:20.121684Z","iopub.execute_input":"2024-06-15T15:48:20.122505Z","iopub.status.idle":"2024-06-15T15:51:12.196904Z","shell.execute_reply.started":"2024-06-15T15:48:20.122464Z","shell.execute_reply":"2024-06-15T15:51:12.195856Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Epoch 1/20\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/layer.py:857: UserWarning: Layer 'conv1d_6' (of type Conv1D) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 250ms/step - accuracy: 0.0416 - loss: 3.5013 - val_accuracy: 0.1752 - val_loss: 2.9568\nEpoch 2/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 239ms/step - accuracy: 0.1367 - loss: 2.8996 - val_accuracy: 0.2094 - val_loss: 2.6310\nEpoch 3/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 226ms/step - accuracy: 0.2352 - loss: 2.4727 - val_accuracy: 0.1795 - val_loss: 2.5323\nEpoch 4/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 227ms/step - accuracy: 0.2750 - loss: 2.1591 - val_accuracy: 0.2179 - val_loss: 2.3609\nEpoch 5/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 227ms/step - accuracy: 0.3504 - loss: 1.8831 - val_accuracy: 0.2009 - val_loss: 2.6775\nEpoch 6/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 227ms/step - accuracy: 0.3405 - loss: 1.9128 - val_accuracy: 0.4060 - val_loss: 1.4786\nEpoch 7/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 242ms/step - accuracy: 0.4346 - loss: 1.5118 - val_accuracy: 0.3974 - val_loss: 1.4360\nEpoch 8/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 227ms/step - accuracy: 0.5435 - loss: 1.2991 - val_accuracy: 0.4103 - val_loss: 1.6011\nEpoch 9/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 225ms/step - accuracy: 0.4902 - loss: 1.3669 - val_accuracy: 0.4359 - val_loss: 1.5643\nEpoch 10/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 238ms/step - accuracy: 0.5327 - loss: 1.2682 - val_accuracy: 0.4231 - val_loss: 1.6133\nEpoch 11/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 225ms/step - accuracy: 0.5982 - loss: 1.1146 - val_accuracy: 0.4744 - val_loss: 1.3846\nEpoch 12/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 228ms/step - accuracy: 0.5566 - loss: 1.1705 - val_accuracy: 0.6111 - val_loss: 1.0050\nEpoch 13/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 228ms/step - accuracy: 0.5945 - loss: 1.0591 - val_accuracy: 0.6496 - val_loss: 0.9247\nEpoch 14/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 240ms/step - accuracy: 0.6409 - loss: 0.9284 - val_accuracy: 0.5214 - val_loss: 1.2957\nEpoch 15/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 227ms/step - accuracy: 0.6524 - loss: 0.9227 - val_accuracy: 0.5897 - val_loss: 1.0320\nEpoch 16/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 225ms/step - accuracy: 0.6815 - loss: 0.8086 - val_accuracy: 0.6368 - val_loss: 0.9464\nEpoch 17/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 227ms/step - accuracy: 0.6645 - loss: 0.8500 - val_accuracy: 0.4915 - val_loss: 1.4731\nEpoch 18/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 241ms/step - accuracy: 0.6749 - loss: 0.8776 - val_accuracy: 0.5256 - val_loss: 1.3230\nEpoch 19/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 228ms/step - accuracy: 0.6957 - loss: 0.8937 - val_accuracy: 0.5043 - val_loss: 1.3461\nEpoch 20/20\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 227ms/step - accuracy: 0.7123 - loss: 0.7617 - val_accuracy: 0.5812 - val_loss: 1.1891\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 67ms/step - accuracy: 0.5253 - loss: 1.2995\nTest Loss: 1.202168345451355\nTest Accuracy: 0.5563139915466309\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Ewaluacja modelu","metadata":{}},{"cell_type":"code","source":"y_pred_prob = model.predict(X_test)\n\ny_pred = np.argmax(y_pred_prob, axis=1)\n\nf_score = f1_score(y_test, y_pred, average='weighted')\nprint(f'F-score: {f_score}')\n\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n\nclass_report = classification_report(y_test, y_pred, target_names=label_encoder.classes_, output_dict=True)\nreport_df = pd.DataFrame(class_report).transpose()\nreport_df.to_csv('vectors_report.csv')\n\nconf_matrix = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.xticks(rotation=90)\nplt.yticks(rotation=0)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:51:36.931572Z","iopub.execute_input":"2024-06-15T15:51:36.932231Z","iopub.status.idle":"2024-06-15T15:51:41.965441Z","shell.execute_reply.started":"2024-06-15T15:51:36.932201Z","shell.execute_reply":"2024-06-15T15:51:41.964385Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 129ms/step\nF-score: 0.5037083472572671\n              precision    recall  f1-score   support\n\n           a       0.50      0.70      0.58        10\n          aa       1.00      0.11      0.20         9\n           b       0.80      1.00      0.89        12\n           c       0.38      1.00      0.56        10\n          cc       1.00      0.33      0.50         6\n          ch       0.33      0.43      0.38         7\n          cz       0.71      0.71      0.71         7\n           d       1.00      0.14      0.25         7\n           e       0.46      0.86      0.60         7\n          ee       0.00      0.00      0.00         7\n           f       0.00      0.00      0.00         7\n           g       0.46      0.86      0.60         7\n           h       1.00      0.12      0.22         8\n           i       0.60      0.43      0.50         7\n           j       0.67      0.75      0.71         8\n           k       1.00      0.88      0.93         8\n           l       0.33      0.88      0.48         8\n          ll       0.00      0.00      0.00         8\n           m       0.71      0.62      0.67         8\n           n       0.44      0.80      0.57        10\n          nn       1.00      0.14      0.25         7\n           o       0.00      0.00      0.00         8\n          oo       0.33      0.12      0.18         8\n           p       0.50      0.12      0.20         8\n           r       0.64      1.00      0.78         7\n          rz       0.62      0.62      0.62         8\n           s       0.35      1.00      0.52         8\n          ss       0.35      0.67      0.46         9\n          sz       1.00      0.75      0.86         8\n           t       0.67      0.25      0.36         8\n           u       1.00      1.00      1.00         8\n           w       0.78      0.88      0.82         8\n           y       0.29      0.22      0.25         9\n           z       1.00      0.60      0.75        10\n          zx       0.56      1.00      0.72         9\n          zz       1.00      0.44      0.62         9\n\n    accuracy                           0.56       293\n   macro avg       0.60      0.54      0.49       293\nweighted avg       0.60      0.56      0.50       293\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Zapis do pliku","metadata":{}},{"cell_type":"code","source":"model.save('LSTM_vectors.keras')","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:13:31.266316Z","iopub.execute_input":"2024-06-09T13:13:31.266799Z","iopub.status.idle":"2024-06-09T13:13:31.321313Z","shell.execute_reply.started":"2024-06-09T13:13:31.266734Z","shell.execute_reply":"2024-06-09T13:13:31.319822Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Wariant z kątami między punktami charakterystycznymi dłoni**","metadata":{}},{"cell_type":"code","source":"data = []\nlabels = []\n\nangle_combinations = [\n    (4, 3, 2), (3, 2, 1), (2, 1, 0), (1, 0, 5), (1, 0, 17), (5, 0, 17), (6, 5, 0), (9, 5, 0), (13, 17, 0), (18, 17, 0),\n    (8, 7, 6), (7, 6, 5), (6, 5, 9), (5, 9, 13), (13, 17, 0), (17, 18, 19), (18, 19, 20), (17, 13, 14), (13, 14, 15),\n    (14, 15, 16), (5, 9, 10), (9, 10, 11), (10, 11, 12), (10, 9, 13), (9, 13, 14), (1, 0, 4)\n]\n\ndef calculate_angles(landmarks):\n    angles = []\n    for comb in angle_combinations:\n        point1 = np.array(landmarks[comb[0]])\n        point2 = np.array(landmarks[comb[1]])\n        point3 = np.array(landmarks[comb[2]])\n        \n        vector1 = point1 - point2\n        vector2 = point3 - point2\n        \n        dot_product = np.dot(vector1, vector2)\n        norm_product = np.linalg.norm(vector1) * np.linalg.norm(vector2)\n        angle = np.arccos(dot_product / norm_product)\n        angles.append(angle)\n    return np.array(angles)\n\nfor label in os.listdir(processed_dir_path):\n    label_path = os.path.join(processed_dir_path, label)\n    if not os.path.isdir(label_path):\n        continue\n\n    for file_name in os.listdir(label_path):\n        file_path = os.path.join(label_path, file_name)\n        if not os.path.isfile(file_path) or not file_path.endswith('.npz'):\n            continue\n        try:\n            data_dict = np.load(file_path, allow_pickle=True)\n            landmarks = data_dict['landmarks']\n\n            sequence_angles = []\n            for frame_landmarks in landmarks:\n                if len(frame_landmarks) > 0:\n                    angles = calculate_angles(frame_landmarks[0])\n                    sequence_angles.append(angles)\n                else:\n                    sequence_angles.append(np.zeros(len(angle_combinations)))\n            data.append(sequence_angles)\n            labels.append(label)\n        except Exception as e:\n            print(f\"Error processing {file_path}: {e}\")\n\nif len(data) == 0 or len(labels) == 0:\n    raise ValueError(\"No data found. Please check the .npz files and directory structure.\")\n\nlabel_encoder = LabelEncoder()\nencoded_labels = label_encoder.fit_transform(labels)\n\nmax_sequence_length = max(len(seq) for seq in data)\npadded_data = pad_sequences(data, maxlen=max_sequence_length, dtype='float32', padding='post', truncating='post', value=np.zeros(len(angle_combinations)))\n\nX = np.array(padded_data)\ny = np.array(encoded_labels)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:13:31.323926Z","iopub.execute_input":"2024-06-09T13:13:31.32444Z","iopub.status.idle":"2024-06-09T13:15:15.768774Z","shell.execute_reply.started":"2024-06-09T13:13:31.324395Z","shell.execute_reply":"2024-06-09T13:15:15.767289Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"###### Budowa modelu","metadata":{}},{"cell_type":"code","source":"model = tf.keras.Sequential([\n    tf.keras.layers.Masking(mask_value=0.0, input_shape=(max_sequence_length, len(angle_combinations))),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, return_sequences=True, recurrent_initializer='glorot_uniform', recurrent_activation='sigmoid', use_cudnn=False)),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, recurrent_initializer='glorot_uniform', recurrent_activation='sigmoid', use_cudnn=False)),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(len(label_encoder.classes_), activation='softmax')\n])\n\nmodel.compile(optimizer='RMSprop', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train, epochs=40, batch_size=32, validation_split=0.2)\n\nloss, accuracy = model.evaluate(X_test, y_test)\nprint(f'Test Loss: {loss}')\nprint(f'Test Accuracy: {accuracy}')","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:15:15.770671Z","iopub.execute_input":"2024-06-09T13:15:15.771159Z","iopub.status.idle":"2024-06-09T13:21:10.374241Z","shell.execute_reply.started":"2024-06-09T13:15:15.771117Z","shell.execute_reply":"2024-06-09T13:21:10.373108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Ewaluacja modelu","metadata":{}},{"cell_type":"code","source":"y_pred_prob = model.predict(X_test)\n\ny_pred = np.argmax(y_pred_prob, axis=1)\n\nf_score = f1_score(y_test, y_pred, average='weighted')\nprint(f'F-score: {f_score}')\n\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n\nclass_report = classification_report(y_test, y_pred, target_names=label_encoder.classes_, output_dict=True)\nreport_df = pd.DataFrame(class_report).transpose()\nreport_df.to_csv('angles_report.csv')\n\nconf_matrix = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.xticks(rotation=90)\nplt.yticks(rotation=0)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:21:10.375463Z","iopub.execute_input":"2024-06-09T13:21:10.375826Z","iopub.status.idle":"2024-06-09T13:21:15.795261Z","shell.execute_reply.started":"2024-06-09T13:21:10.375783Z","shell.execute_reply":"2024-06-09T13:21:15.794071Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Zapis do pliku","metadata":{}},{"cell_type":"code","source":"model.save('LSTM_angles.keras')","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:21:15.79694Z","iopub.execute_input":"2024-06-09T13:21:15.79737Z","iopub.status.idle":"2024-06-09T13:21:15.840716Z","shell.execute_reply.started":"2024-06-09T13:21:15.797326Z","shell.execute_reply":"2024-06-09T13:21:15.839671Z"},"trusted":true},"execution_count":null,"outputs":[]}]}